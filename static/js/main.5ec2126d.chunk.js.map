{"version":3,"sources":["TableHeader.js","TableBody.js","JobsTable.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","tableRow","this","props","characterData","map","person","i","key","name","job","Button","variant","onClick","removeCharacter","Table","striped","bordered","hover","React","Component","JobsTable","AddNewJob","handleChange","event","target","value","setState","onFormSubmit","preventDefault","handleSubmit","state","initialState","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","required","Text","className","App","index","characters","filter","character","id","data","fetch","then","result","json","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ec2126d.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nfunction TableHeader() {\r\n    return (\r\n        <Fragment>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Job</th>\r\n                    <th>action</th>\r\n                </tr>\r\n            </thead>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, { Fragment } from 'react';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport TableHeader from './TableHeader';\r\nclass TableBody extends React.Component {\r\n    render() {\r\n        const { characterData } = this.props;\r\n        const tableRow = characterData.map((person, i) => {\r\n           return(\r\n            <tr key={i}>\r\n            <td>{person.name}</td>\r\n            <td>{person.job}</td>\r\n            <td><Button  variant=\"outline-danger\" onClick={() => this.props.removeCharacter(i)}>delete</Button></td>\r\n        </tr>\r\n           )\r\n        })\r\n        return (\r\n            <Fragment>\r\n                <Table striped bordered hover>\r\n                    <TableHeader/>\r\n                    <tbody>\r\n                     {tableRow}\r\n                    </tbody>\r\n                </Table>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableBody;\r\n","import React, { Fragment } from 'react';\r\nimport TableBody from './TableBody'\r\nimport { Table } from 'react-bootstrap'\r\n\r\nconst JobsTable = (props) => {\r\n\r\n    const { characterData, removeCharacter } = props;\r\n    return (\r\n        <Fragment>\r\n            <Table striped bordered hover>\r\n                <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n            </Table>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default JobsTable;\r\n","import React, { Component } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nclass AddNewJob extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            name: '',\r\n            job: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render() {\r\n        const { name, job } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onFormSubmit}>\r\n                <Form.Group controlId=\"formBasicName\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"name ...\" name=\"name\" value={name} onChange={this.handleChange} required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        We'll never share your personal data with anyone else.\r\n                   </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"job ...\" name=\"job\" value={job} onChange={this.handleChange} required />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n            </Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewJob;","import React from 'react';\nimport JobsTable from './JobsTable';\nimport Form from './Form';\nimport './App.css';\nclass App extends React.Component {\n    constructor(props){\n        super(props)\n        this.state ={\n            characters: [\n                {    id:1,\n                    name: 'Charlie',\n                    job: 'Janitor',\n                  },\n                  { id:2,\n                    name: 'Mac',\n                    job: 'Bouncer',\n                  }\n            ],\n            data:[]\n        }\n    }\n\n     // Code is invoked after the component is mounted/inserted into the DOM tree.\n  componentDidMount() {\n    const url =\n      'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\n\n    fetch(url)\n      .then(result => result.json())\n      .then(result => {\n        this.setState({\n          data: result,\n        })\n      })\n  }\n  removeCharacter = index => {\n      const { characters } = this.state;\n  \n      this.setState({\n          characters: characters.filter((character, i) => { \n              return i !== index;\n          })\n      });\n  }\n\n  handleSubmit = character => {\n      this.setState({characters: [...this.state.characters, character]});\n  }\n\n  render() {\n      const { characters, data } = this.state;\n      console.log(data)\n      return (\n          <div className=\"container\">\n              <h1>React Tutorial</h1>\n              <p>Add a character with a name and a job to the table.</p>\n              <JobsTable\n                  characterData={characters}\n                  removeCharacter={this.removeCharacter}\n              />\n              <h3>Add New</h3>\n              <Form handleSubmit={this.handleSubmit} />\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}